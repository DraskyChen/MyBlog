import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.C2Gjomh7.js";const c=JSON.parse('{"title":"🐳 Docker 学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"devops/container/docker基础.md","filePath":"devops/container/docker基础.md","lastUpdated":1756829839000}'),r={name:"devops/container/docker基础.md"};function n(l,s,h,o,k,d){return a(),t("div",null,[...s[0]||(s[0]=[e(`<h1 id="🐳-docker-学习笔记" tabindex="-1">🐳 Docker 学习笔记 <a class="header-anchor" href="#🐳-docker-学习笔记" aria-label="Permalink to &quot;🐳 Docker 学习笔记&quot;">​</a></h1><h2 id="_1-docker-是什么" tabindex="-1">1. Docker 是什么？ <a class="header-anchor" href="#_1-docker-是什么" aria-label="Permalink to &quot;1. Docker 是什么？&quot;">​</a></h2><ul><li><p><strong>定义</strong>：Docker 是一个开源的容器化平台，用于打包、分发和运行应用。</p></li><li><p><strong>核心价值</strong>：一次构建，到处运行（Build Once, Run Anywhere）。</p></li><li><p><strong>特点</strong>：</p><ul><li>轻量化（相对虚拟机，不需要完整的操作系统）。</li><li>快速部署（秒级启动）。</li><li>跨平台（无论是本地、测试环境还是云端，都能一致运行）。</li></ul></li></ul><hr><h2 id="_2-docker-架构原理" tabindex="-1">2. Docker 架构原理 <a class="header-anchor" href="#_2-docker-架构原理" aria-label="Permalink to &quot;2. Docker 架构原理&quot;">​</a></h2><p>Docker 采用 <strong>客户端-服务端（C/S）架构</strong>：</p><ul><li><p><strong>Docker Client（客户端）</strong></p><ul><li>用户交互入口，例如：<code>docker build</code>、<code>docker run</code>。</li><li>发送请求给 Docker Daemon。</li></ul></li><li><p><strong>Docker Daemon（守护进程）</strong></p><ul><li>核心服务，负责镜像构建、容器运行、网络和存储管理。</li></ul></li><li><p><strong>Docker Registry（镜像仓库）</strong></p><ul><li>用于存储镜像，官方有 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>，企业可以自建私有仓库。</li></ul></li><li><p><strong>工作流程</strong>：</p><ol><li>用户执行 <code>docker run</code>。</li><li>Docker Client 请求 Daemon。</li><li>Daemon 检查镜像（本地/远程仓库）。</li><li>基于镜像创建并运行容器。</li></ol></li></ul><hr><h2 id="_3-docker-命令基础" tabindex="-1">3. Docker 命令基础 <a class="header-anchor" href="#_3-docker-命令基础" aria-label="Permalink to &quot;3. Docker 命令基础&quot;">​</a></h2><h3 id="镜像相关" tabindex="-1">镜像相关 <a class="header-anchor" href="#镜像相关" aria-label="Permalink to &quot;镜像相关&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 拉取镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 查看本地镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">image_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 删除镜像</span></span></code></pre></div><h3 id="容器相关" tabindex="-1">容器相关 <a class="header-anchor" href="#容器相关" aria-label="Permalink to &quot;容器相关&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 启动交互式容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 查看运行容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 查看所有容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 停止容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 删除容器</span></span></code></pre></div><h3 id="日志与进入容器" tabindex="-1">日志与进入容器 <a class="header-anchor" href="#日志与进入容器" aria-label="Permalink to &quot;日志与进入容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 查看容器日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 进入容器</span></span></code></pre></div><h3 id="数据卷与网络" tabindex="-1">数据卷与网络 <a class="header-anchor" href="#数据卷与网络" aria-label="Permalink to &quot;数据卷与网络&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 查看数据卷</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 查看网络</span></span></code></pre></div><hr><h2 id="_4-docker-容器和虚拟机的区别" tabindex="-1">4. Docker 容器和虚拟机的区别 <a class="header-anchor" href="#_4-docker-容器和虚拟机的区别" aria-label="Permalink to &quot;4. Docker 容器和虚拟机的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>对比项</th><th>容器（Docker）</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td><strong>启动速度</strong></td><td>秒级</td><td>分钟级</td></tr><tr><td><strong>体积大小</strong></td><td>MB 级</td><td>GB 级</td></tr><tr><td><strong>资源占用</strong></td><td>共享宿主机内核，开销小</td><td>需要完整操作系统，开销大</td></tr><tr><td><strong>隔离性</strong></td><td>进程级隔离</td><td>完整 OS 隔离</td></tr><tr><td><strong>适用场景</strong></td><td>微服务、CI/CD、快速部署</td><td>需要强隔离、运行不同内核的系统</td></tr></tbody></table><hr><h2 id="_5-docker-compose-是什么" tabindex="-1">5. Docker Compose 是什么？ <a class="header-anchor" href="#_5-docker-compose-是什么" aria-label="Permalink to &quot;5. Docker Compose 是什么？&quot;">​</a></h2><ul><li><p><strong>定义</strong>：一个用于 <strong>多容器应用编排</strong> 的工具。</p></li><li><p><strong>作用</strong>：通过 <code>docker-compose.yml</code> 文件定义多个服务（前端 + 后端 + 数据库）。</p></li><li><p><strong>特点</strong>：</p><ul><li>一键启动/关闭所有服务：<code>docker-compose up</code>、<code>docker-compose down</code>。</li><li>简化多容器的管理。</li></ul></li></ul><hr><h2 id="_6-docker-swarm-是什么" tabindex="-1">6. Docker Swarm 是什么？ <a class="header-anchor" href="#_6-docker-swarm-是什么" aria-label="Permalink to &quot;6. Docker Swarm 是什么？&quot;">​</a></h2><ul><li><p><strong>定义</strong>：Docker 自带的 <strong>集群管理和编排工具</strong>。</p></li><li><p><strong>作用</strong>：把多台 Docker 主机组成一个集群（Swarm），统一调度容器。</p></li><li><p><strong>特点</strong>：</p><ul><li>内置在 Docker 中，开箱即用。</li><li>支持负载均衡、服务扩缩容。</li></ul></li></ul><hr><h2 id="_7-docker-compose-和-docker-swarm-的区别" tabindex="-1">7. Docker Compose 和 Docker Swarm 的区别 <a class="header-anchor" href="#_7-docker-compose-和-docker-swarm-的区别" aria-label="Permalink to &quot;7. Docker Compose 和 Docker Swarm 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>对比项</th><th>Docker Compose</th><th>Docker Swarm</th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>单机环境下的多容器编排</td><td>集群环境下的容器编排</td></tr><tr><td><strong>使用文件</strong></td><td><code>docker-compose.yml</code></td><td><code>docker stack deploy -c compose.yml</code></td></tr><tr><td><strong>适用场景</strong></td><td>本地开发、测试环境</td><td>生产环境的分布式集群部署</td></tr></tbody></table><hr><h2 id="_8-docker-和-kubernetes-k8s-的关系" tabindex="-1">8. Docker 和 Kubernetes (k8s) 的关系 <a class="header-anchor" href="#_8-docker-和-kubernetes-k8s-的关系" aria-label="Permalink to &quot;8. Docker 和 Kubernetes (k8s) 的关系&quot;">​</a></h2><ul><li><p><strong>Docker</strong>：容器引擎，用于构建和运行单个容器。</p></li><li><p><strong>Kubernetes</strong>：容器编排系统，用于管理大规模容器集群。</p></li><li><p><strong>关系</strong>：</p><ul><li>Kubernetes 可以使用 Docker 容器作为运行时（Runtime）。</li><li>后来逐渐演进到支持 CRI（Container Runtime Interface），也可以用 containerd、CRI-O 等。</li></ul></li></ul><hr><h2 id="_9-docker-swarm-和-kubernetes-k8s-的差异" tabindex="-1">9. Docker Swarm 和 Kubernetes (k8s) 的差异 <a class="header-anchor" href="#_9-docker-swarm-和-kubernetes-k8s-的差异" aria-label="Permalink to &quot;9. Docker Swarm 和 Kubernetes (k8s) 的差异&quot;">​</a></h2><table tabindex="0"><thead><tr><th>对比项</th><th>Docker Swarm</th><th>Kubernetes (k8s)</th></tr></thead><tbody><tr><td><strong>复杂度</strong></td><td>简单，学习成本低</td><td>功能强大，学习曲线陡峭</td></tr><tr><td><strong>功能</strong></td><td>基本的容器编排、负载均衡</td><td>自动伸缩、服务发现、滚动升级等全面功能</td></tr><tr><td><strong>生态</strong></td><td>官方支持逐渐减少</td><td>社区活跃，云原生标准</td></tr><tr><td><strong>适用场景</strong></td><td>小规模集群，快速搭建</td><td>大规模生产环境，企业级集群管理</td></tr></tbody></table>`,35)])])}const g=i(r,[["render",n]]);export{c as __pageData,g as default};
