import{_ as t,c as o,o as a,ag as l}from"./chunks/framework.C2Gjomh7.js";const c=JSON.parse('{"title":"嗨，欢迎来到我的小站 👋","description":"","frontmatter":{},"headers":[],"relativePath":"self-intro.md","filePath":"self-intro.md","lastUpdated":1756829839000}'),n={name:"self-intro.md"};function i(s,r,e,g,h,d){return a(),o("div",null,[...r[0]||(r[0]=[l('<h1 id="嗨-欢迎来到我的小站-👋" tabindex="-1">嗨，欢迎来到我的小站 👋 <a class="header-anchor" href="#嗨-欢迎来到我的小站-👋" aria-label="Permalink to &quot;嗨，欢迎来到我的小站 👋&quot;">​</a></h1><p>我是 <strong>Drasky Chen</strong>，一个对「把点子变成可用产品」上头的开发者。 前端能写、后端能搭、AI 能落地、工程化也爱折腾。简单说：<strong>能让我好奇、能让我动手的，我都想试</strong>。</p><hr><h2 id="我最近在折腾啥-🛠️" tabindex="-1">我最近在折腾啥？🛠️ <a class="header-anchor" href="#我最近在折腾啥-🛠️" aria-label="Permalink to &quot;我最近在折腾啥？🛠️&quot;">​</a></h2><ul><li><strong>Web 全栈</strong>：用 Vue / React 写界面，用 Node.js / Express 搭接口，MongoDB 做数据存储。</li><li><strong>AI 应用</strong>：把大模型塞进真实场景，玩过 Agent 流程、图像分类（ViT / FGVC）等。</li><li><strong>工程化 / DevOps</strong>：GitHub Actions 自动化、容器化（Docker）、服务治理（Nginx）、偶尔碰 K8s。</li><li><strong>性能与体验</strong>：从首屏到交互，从缓存到埋点，能量化就不拍脑袋。</li></ul><blockquote><p>标签不是目的，能解决问题才是。😄</p></blockquote><hr><h2 id="我的技术口味-🍜" tabindex="-1">我的技术口味 🍜 <a class="header-anchor" href="#我的技术口味-🍜" aria-label="Permalink to &quot;我的技术口味 🍜&quot;">​</a></h2><ul><li><strong>偏好类型安全、明确边界</strong>：TypeScript、清晰的接口定义、可复用的组件与 hooks。</li><li><strong>更爱“可维护”的工程</strong>：规范化提交、CI 检查、按需发布、灰度回滚。</li><li><strong>能自动就不手动</strong>：脚本、流水线、模板化，把“重复劳动”消灭在提交前。</li><li><strong>数据和实验说话</strong>：用指标验证改动，而不是“感觉应该更快”。</li></ul><hr><h2 id="为什么写博客-✍️" tabindex="-1">为什么写博客？✍️ <a class="header-anchor" href="#为什么写博客-✍️" aria-label="Permalink to &quot;为什么写博客？✍️&quot;">​</a></h2><ul><li><strong>给未来的自己</strong>：把踩过的坑、做过的实验、踩对的点记录下来，省得二次掉坑。</li><li><strong>给路上的同伴</strong>：分享一些能复用的做法和决策思路，而不仅是“能跑的代码”。</li><li><strong>给好奇心留出口</strong>：把想法写出来，逼自己把“模糊的直觉”打磨成“可执行方案”。</li></ul><hr><h2 id="你会在这里看到-📚" tabindex="-1">你会在这里看到 📚 <a class="header-anchor" href="#你会在这里看到-📚" aria-label="Permalink to &quot;你会在这里看到 📚&quot;">​</a></h2><ul><li><strong>前后端开发笔记</strong>：从组件设计到接口契约，从状态管理到缓存策略。</li><li><strong>AI 实战手记</strong>：模型选型、推理链路、评测对比、上线注意点。</li><li><strong>工程化与运维</strong>：CI/CD 流水线、版本与环境管理、可观测性与报警。</li><li><strong>工具与最佳实践</strong>：Git、Nginx、Docker 的“刚好够用”的实践清单。</li><li><strong>「踩坑与复盘」</strong>：问题 → 定位 → 方案对比 → 取舍理由 → 结果与反思。</li></ul><hr><h2 id="小目标与进行中-✅" tabindex="-1">小目标与进行中 ✅ <a class="header-anchor" href="#小目标与进行中-✅" aria-label="Permalink to &quot;小目标与进行中 ✅&quot;">​</a></h2><ul><li>[ ] 打磨一套 <strong>全栈 + AI</strong> 的最小可行脚手架（前后端、鉴权、日志、部署一条龙）。</li><li>[ ] 总结一份 <strong>前端性能优化清单</strong>（从构建到运行的端到端指标）。</li><li>[ ] 把 <strong>Agent/工具调用</strong> 的最佳实践写成可复用模板。</li><li>[ ] 整理 <strong>Nginx 生产环境</strong> 的常用配置与排错思路。</li></ul><hr><h2 id="本站怎么逛-🧭" tabindex="-1">本站怎么逛 🧭 <a class="header-anchor" href="#本站怎么逛-🧭" aria-label="Permalink to &quot;本站怎么逛 🧭&quot;">​</a></h2><ul><li><strong>专题合集</strong>：按主题归档（全栈 / AI 应用 / 工程化）。</li><li><strong>实践优先</strong>：文章尽量带可复制的代码片段、配置、命令行。</li><li><strong>示例先行</strong>：能跑的 Demo 永远比十段文字有用。</li><li><strong>更新节奏</strong>：以“质量优先”为原则，按产出自然生长。</li></ul><hr><h2 id="技术之外-🌿" tabindex="-1">技术之外 🌿 <a class="header-anchor" href="#技术之外-🌿" aria-label="Permalink to &quot;技术之外 🌿&quot;">​</a></h2><p>爱把复杂问题拆小、把抽象落地。空下来会做做 side project、读读开源项目的实现，偶尔写点随笔。 相信“<strong>把事情做对</strong>”和“<strong>把对的事情做出来</strong>”同样重要。</p><hr><h2 id="找到我-📬" tabindex="-1">找到我 📬 <a class="header-anchor" href="#找到我-📬" aria-label="Permalink to &quot;找到我 📬&quot;">​</a></h2><ul><li>GitHub：<a href="#">@DraskyChen</a></li></ul>',27)])])}const b=t(n,[["render",i]]);export{c as __pageData,b as default};
