import{_ as i,c as t,o as a,j as e,ag as l,a as s}from"./chunks/framework.C2Gjomh7.js";const h=JSON.parse('{"title":"现代卷积神经网络","description":"","frontmatter":{},"headers":[],"relativePath":"ai/DeepLearning/现代卷积神经网络/index.md","filePath":"ai/DeepLearning/现代卷积神经网络/index.md","lastUpdated":1756829839000}'),p={name:"ai/DeepLearning/现代卷积神经网络/index.md"},o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"5.028ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 2222.4 666","aria-hidden":"true"};function d(m,n,T,u,g,x){return a(),t("div",null,[n[9]||(n[9]=e("h1",{id:"现代卷积神经网络",tabindex:"-1"},[s("现代卷积神经网络 "),e("a",{class:"header-anchor",href:"#现代卷积神经网络","aria-label":'Permalink to "现代卷积神经网络"'},"​")],-1)),n[10]||(n[10]=e("p",null,[s("🏷️"),e("code",null,"chap_modern_cnn")],-1)),n[11]||(n[11]=e("p",null,"上一章我们介绍了卷积神经网络的基本原理，本章将介绍现代的卷积神经网络架构，许多现代卷积神经网络的研究都是建立在这一章的基础上的。 在本章中的每一个模型都曾一度占据主导地位，其中许多模型都是ImageNet竞赛的优胜者。ImageNet竞赛自2010年以来，一直是计算机视觉中监督学习进展的指向标。",-1)),n[12]||(n[12]=e("p",null,"这些模型包括：",-1)),e("ul",null,[n[4]||(n[4]=e("li",null,"AlexNet。它是第一个在大规模视觉竞赛中击败传统计算机视觉模型的大型神经网络；",-1)),n[5]||(n[5]=e("li",null,"使用重复块的网络（VGG）。它利用许多重复的神经网络块；",-1)),e("li",null,[n[2]||(n[2]=s("网络中的网络（NiN）。它重复使用由卷积层和",-1)),e("mjx-container",o,[(a(),t("svg",r,[...n[0]||(n[0]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1)])])),n[1]||(n[1]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mn",null,"1"),e("mo",null,"×"),e("mn",null,"1")])],-1))]),n[3]||(n[3]=s("卷积层（用来代替全连接层）来构建深层网络;",-1))]),n[6]||(n[6]=e("li",null,"含并行连结的网络（GoogLeNet）。它使用并行连结的网络，通过不同窗口大小的卷积层和最大汇聚层来并行抽取信息；",-1)),n[7]||(n[7]=e("li",null,"残差网络（ResNet）。它通过残差块构建跨层的数据通道，是计算机视觉中最流行的体系架构；",-1)),n[8]||(n[8]=e("li",null,"稠密连接网络（DenseNet）。它的计算成本很高，但给我们带来了更好的效果。",-1))]),n[13]||(n[13]=l(`<p>虽然深度神经网络的概念非常简单——将神经网络堆叠在一起。但由于不同的网络架构和超参数选择，这些神经网络的性能会发生很大变化。 本章介绍的神经网络是将人类直觉和相关数学见解结合后，经过大量研究试错后的结晶。 我们会按时间顺序介绍这些模型，在追寻历史的脉络的同时，帮助培养对该领域发展的直觉。这将有助于研究开发自己的架构。 例如，本章介绍的批量规范化（batch normalization）和残差网络（ResNet）为设计和训练深度神经网络提供了重要思想指导。</p><div class="language-toc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>:maxdepth: 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>alexnet</span></span>
<span class="line"><span>vgg</span></span>
<span class="line"><span>nin</span></span>
<span class="line"><span>googlenet</span></span>
<span class="line"><span>batch-norm</span></span>
<span class="line"><span>resnet</span></span>
<span class="line"><span>densenet</span></span></code></pre></div>`,2))])}const w=i(p,[["render",d]]);export{h as __pageData,w as default};
