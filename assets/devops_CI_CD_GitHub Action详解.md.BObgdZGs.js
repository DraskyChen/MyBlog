import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D207NPw5.js";const o=JSON.parse('{"title":"深入 GitHub Actions：核心机制深入解读与实战示例","description":"","frontmatter":{},"headers":[],"relativePath":"devops/CI_CD/GitHub Action详解.md","filePath":"devops/CI_CD/GitHub Action详解.md","lastUpdated":1756040919000}'),l={name:"devops/CI_CD/GitHub Action详解.md"};function t(k,s,p,e,E,r){return n(),a("div",null,[...s[0]||(s[0]=[h(`<h1 id="深入-github-actions-核心机制深入解读与实战示例" tabindex="-1">深入 GitHub Actions：核心机制深入解读与实战示例 <a class="header-anchor" href="#深入-github-actions-核心机制深入解读与实战示例" aria-label="Permalink to &quot;深入 GitHub Actions：核心机制深入解读与实战示例&quot;">​</a></h1><h2 id="一、核心概念深入解构" tabindex="-1">一、核心概念深入解构 <a class="header-anchor" href="#一、核心概念深入解构" aria-label="Permalink to &quot;一、核心概念深入解构&quot;">​</a></h2><h3 id="_1-workflow-工作流" tabindex="-1">1. Workflow（工作流） <a class="header-anchor" href="#_1-workflow-工作流" aria-label="Permalink to &quot;1. Workflow（工作流）&quot;">​</a></h3><ul><li>定义方式：位于 <code>.github/workflows/</code> 下的 YAML 文件，是自动化流程的顶层描述。</li><li>触发时机：支持多种方式，包括常见事件（如 <code>push</code>, <code>pull_request</code>, <code>release</code>）、定时触发（<code>schedule</code>）、手动（<code>workflow_dispatch</code>）、远程（<code>repository_dispatch</code>）等 ([GitHub Docs][1])。</li></ul><h3 id="_2-job-作业" tabindex="-1">2. Job（作业） <a class="header-anchor" href="#_2-job-作业" aria-label="Permalink to &quot;2. Job（作业）&quot;">​</a></h3><ul><li>工作流内可定义多个 Job。</li><li>每个 Job 包含一系列 Steps，并运行在指定 Runner（GitHub-hosted 或自托管）。</li><li>默认为并行执行，可使用 <code>needs:</code> 指定执行顺序，实现串行依赖。</li></ul><h3 id="_3-step-步骤-与-action-动作" tabindex="-1">3. Step（步骤）与 Action（动作） <a class="header-anchor" href="#_3-step-步骤-与-action-动作" aria-label="Permalink to &quot;3. Step（步骤）与 Action（动作）&quot;">​</a></h3><ul><li><strong>Step</strong>：Job 中执行的单元，可能是 <code>run:</code> 一段 shell 命令，也可能 <code>uses:</code> 引入已有 Action。</li><li><strong>Action</strong>：可复用的独立任务单元，托管于 GitHub Marketplace 或自定义。</li></ul><h3 id="_4-runner-运行器" tabindex="-1">4. Runner（运行器） <a class="header-anchor" href="#_4-runner-运行器" aria-label="Permalink to &quot;4. Runner（运行器）&quot;">​</a></h3><ul><li>Job 执行所在环境：GitHub 提供的虚拟机（如 Ubuntu/macOS/Windows）或自托管实例。</li><li>每次 Job 在全新环境中运行，确保环境干净可控。</li></ul><h3 id="_5-matrix-矩阵策略" tabindex="-1">5. Matrix（矩阵策略） <a class="header-anchor" href="#_5-matrix-矩阵策略" aria-label="Permalink to &quot;5. Matrix（矩阵策略）&quot;">​</a></h3><ul><li>利用 <code>strategy.matrix</code> 实现不同变量组合的并行 Job，比如同时在多个操作系统和 Node 版本上测试 ([GitHub Docs][1])。</li><li>支持 <code>include</code>/<code>exclude</code> 筛选组合，<code>fail-fast</code> 控制失败策略，<code>max-parallel</code> 限制并行数。</li></ul><h3 id="_6-注释机制" tabindex="-1">6. 注释机制 <a class="header-anchor" href="#_6-注释机制" aria-label="Permalink to &quot;6. 注释机制&quot;">​</a></h3><p>GitHub Actions 的 YAML 文件中支持标准 YAML 注释，即以 <code># </code> 开头的行都被视为注释，不会执行 ([futurestud.io][2], [Stack Overflow][3], [GitHub][4])。</p><hr><h2 id="二、带注释的完整-ci-矩阵-发布-workflow-示例" tabindex="-1">二、带注释的完整 CI + 矩阵 + 发布 Workflow 示例 <a class="header-anchor" href="#二、带注释的完整-ci-矩阵-发布-workflow-示例" aria-label="Permalink to &quot;二、带注释的完整 CI + 矩阵 + 发布 Workflow 示例&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Node CI + Release</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 定义本 workflow 的名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当代码推送到 main 分支时触发</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pull_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或在 PR 针对 main 分支打开/更新时触发</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0 0 * * *&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 每天 UTC 时间 00:00 自动触发一次</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Run Tests Across Environments</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ matrix.os }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用矩阵中定义的操作系统</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        os</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">windows-latest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">macos-latest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 三个平台</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 两个 Node.js 版本</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      fail-fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 一旦任意测试失败，则取消其他 Job（默认 true）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 检出仓库代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Node.js</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ matrix.node }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置 Node.js 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install Dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm ci</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 安装依赖，适合 CI 环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Run Tests</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 执行测试脚本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build_and_release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build &amp; Create Release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 仅在 Linux 上执行构建与发布</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    needs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 确保 test Job 通过后才执行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github.event_name == &#39;push&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 仅在 push 事件触发时运行，不包括 PR</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 再次检出代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build Project</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 构建生产包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Create Release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">create_release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/create-release@v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          tag_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1.\${{ github.run_number }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 自动生成 tag，示例：v1.25</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          release_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Release \${{ github.run_number }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Automated release from GitHub Actions</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          GITHUB_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GITHUB_TOKEN }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用 GitHub 自动生成的 token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Upload Release Asset</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/upload-release-asset@v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          upload_url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ steps.create_release.outputs.upload_url }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          asset_path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./release.zip</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 上传的文件路径</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          asset_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">release.zip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          asset_content_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">application/zip</span></span></code></pre></div>`,17)])])}const g=i(l,[["render",t]]);export{o as __pageData,g as default};
